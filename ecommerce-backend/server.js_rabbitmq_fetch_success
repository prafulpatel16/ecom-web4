// RABBITMQ FETCH MESSAGES
const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
require('dotenv').config();
const { connectRabbitMQ, sendToQueue, consumeFromQueue, getMessagesFromQueue } = require('./rabbitmq.js');

const app = express();

// Configure PostgreSQL connection
const pool = new Pool({
  user: process.env.POSTGRES_USER,
  host: process.env.POSTGRES_HOST,
  database: process.env.POSTGRES_DB,
  password: process.env.POSTGRES_PASSWORD,
  port: process.env.POSTGRES_PORT,
});

// Enable CORS
app.use(cors({
  origin: 'http://localhost:3000',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

// Middleware to parse JSON bodies
app.use(express.json());

// Root route handler
app.get('/api', (req, res) => {
  res.send('Welcome to the backend server. Please use the /products endpoint to retrieve data.');
});

// Get products endpoint
app.get('/api/products', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM products');
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// Add product to the database
app.post('/api/products', async (req, res) => {
  const { name, price } = req.body;

  if (!name || !price) {
    return res.status(400).json({ message: 'Product name and price are required' });
  }

  try {
    const result = await pool.query(
      'INSERT INTO products (name, price) VALUES ($1, $2) RETURNING *',
      [name, price]
    );

    await sendToQueue('product_queue', JSON.stringify({ action: 'add', product: result.rows[0] }));

    res.status(201).json(result.rows[0]); // Return the newly added product
  } catch (err) {
    console.error('Failed to add product:', err);
    res.status(500).json({ message: 'Failed to add product' });
  }
});

// Update an existing product
app.put('/api/products/:id', async (req, res) => {
  const { id } = req.params;
  const { name, price } = req.body;

  if (!name || !price) {
    return res.status(400).json({ message: 'Product name and price are required' });
  }

  try {
    const result = await pool.query(
      'UPDATE products SET name = $1, price = $2 WHERE id = $3 RETURNING *',
      [name, price, id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Product not found' });
    }

    await sendToQueue('product_queue', JSON.stringify({ action: 'update', product: result.rows[0] }));

    res.status(200).json(result.rows[0]);
  } catch (err) {
    console.error('Failed to update product:', err);
    res.status(500).json({ message: 'Failed to update product' });
  }
});

// Delete an existing product
app.delete('/api/products/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const result = await pool.query(
      'DELETE FROM products WHERE id = $1 RETURNING *',
      [id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Product not found' });
    }

    await sendToQueue('product_queue', JSON.stringify({ action: 'delete', productId: id }));

    res.status(200).json({ message: 'Product deleted', product: result.rows[0] });
  } catch (err) {
    console.error('Failed to delete product:', err);
    res.status(500).json({ message: 'Failed to delete product' });
  }
});

// Connect to RabbitMQ and start consuming messages
connectRabbitMQ().then(() => {
  consumeFromQueue('product_queue', (message) => {
    console.log('Message processed:', message);
  });
});

// Endpoint to send a product to RabbitMQ queue
app.post('/api/product_queue', async (req, res) => {
  const { product } = req.body;
  if (product) {
    try {
      await sendToQueue('product_queue', JSON.stringify(product));
      res.status(200).json({ message: 'Message sent to queue' });
    } catch (err) {
      console.error('Failed to send message to queue:', err);
      res.status(500).json({ message: 'Failed to send message' });
    }
  } else {
    res.status(400).json({ message: 'Product data is required' });
  }
});

// API endpoint to fetch messages from RabbitMQ queue
app.get('/api/queue/product_queue', (req, res) => {
  try {
    const messages = getMessagesFromQueue(); // Fetch messages from the queue
    res.status(200).json(messages);
  } catch (err) {
    console.error('Failed to fetch messages from queue:', err);
    res.status(500).json({ message: 'Failed to fetch messages from queue' });
  }
});

const port = process.env.PORT || 5000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
