import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';
import axiosInstance from './axiosInstance';
import { useAuth0 } from '@auth0/auth0-react';

function App() {
  const { loginWithRedirect, logout, isAuthenticated, getAccessTokenSilently, user } = useAuth0();
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [productName, setProductName] = useState('');
  const [productPrice, setProductPrice] = useState('');
  const [selectedProductId, setSelectedProductId] = useState(null);
  const [responseMessage, setResponseMessage] = useState('');
  const [queueMessages, setQueueMessages] = useState([]);
  const [cacheTestResults, setCacheTestResults] = useState({
    firstFetchStatus: '',
    secondFetchStatus: '',
    overallMessage: ''
  });

  // Fetch products after authentication
  useEffect(() => {
    if (isAuthenticated) {
      fetchProducts(); // Fetch products when authenticated
    }
  }, [isAuthenticated]);

  // Fetch products from API (with Auth0 access token)
  const fetchProducts = async () => {
    try {
      const token = await getAccessTokenSilently(); // Get Auth0 access token
      const backendUrl = `${process.env.REACT_APP_BACKEND_SERVICE}/api/products`;
      const response = await axios.get(backendUrl, {
        headers: {
          Authorization: `Bearer ${token}`, // Pass token in the headers
        },
      });
      setProducts(response.data.products);
      setLoading(false);
      return response.data.cacheStatus; // Return cacheStatus for Redis testing
    } catch (error) {
      console.error('Error fetching products:', error);
      setError(`Error fetching products: ${error.message}. Please try again later.`);
      setLoading(false);
      return null;
    }
  };

  // Add or update product (with Auth0 access token)
  const handleAddOrUpdateProduct = async () => {
    const backendUrl = selectedProductId 
      ? `${process.env.REACT_APP_BACKEND_SERVICE}/api/products/${selectedProductId}` 
      : `${process.env.REACT_APP_BACKEND_SERVICE}/api/products`;

    try {
      const token = await getAccessTokenSilently();
      const response = selectedProductId
        ? await axiosInstance.put(backendUrl, { name: productName, price: parseFloat(productPrice) }, {
            headers: { Authorization: `Bearer ${token}` }
          })
        : await axiosInstance.post(backendUrl, { name: productName, price: parseFloat(productPrice) }, {
            headers: { Authorization: `Bearer ${token}` }
          });

      setResponseMessage(`Product ${selectedProductId ? 'updated' : 'added'}: ${response.data.name} - $${response.data.price}`);
      setProductName('');
      setProductPrice('');
      setSelectedProductId(null);

      await fetchProducts();
    } catch (error) {
      console.error(`Error ${selectedProductId ? 'updating' : 'adding'} product:`, error);
      setResponseMessage(error.response ? error.response.data.message : 'Failed to perform operation');
    }
  };

  // Delete product (with Auth0 access token)
  const handleDeleteProduct = async (id) => {
    const backendUrl = `${process.env.REACT_APP_BACKEND_SERVICE}/api/products/${id}`;

    try {
      const token = await getAccessTokenSilently();
      await axiosInstance.delete(backendUrl, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setResponseMessage('Product deleted successfully');

      await fetchProducts();
    } catch (error) {
      console.error('Error deleting product:', error);
      setResponseMessage(error.response ? error.response.data.message : 'Failed to delete product');
    }
  };

  // Select product for editing
  const handleSelectProduct = (product) => {
    setSelectedProductId(product.id);
    setProductName(product.name);
    setProductPrice(product.price);
  };

  // Fetch RabbitMQ messages (with Auth0 access token)
  const fetchQueueMessages = async () => {
    try {
      const token = await getAccessTokenSilently();
      const response = await axiosInstance.get(`${process.env.REACT_APP_BACKEND_SERVICE}/api/queue/product_queue`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setQueueMessages(response.data);
    } catch (error) {
      console.error('Error fetching messages from queue:', error);
      setQueueMessages([]);
    }
  };

  // Clear queue messages
  const clearQueueMessages = () => {
    setQueueMessages([]);
    setResponseMessage('Queue messages cleared');
  };

  // Test Redis cache (with Auth0 access token)
  const testRedisCache = async () => {
    try {
      const token = await getAccessTokenSilently();
      setCacheTestResults({
        firstFetchStatus: '',
        secondFetchStatus: '',
        overallMessage: 'Clearing Redis cache...',
      });
  
      const backendUrl = `${process.env.REACT_APP_BACKEND_SERVICE}/api/cache/clear`;
      await axiosInstance.get(backendUrl, {
        headers: { Authorization: `Bearer ${token}` },
      });
  
      setCacheTestResults((prev) => ({
        ...prev,
        overallMessage: 'Redis cache cleared. Testing cache...',
      }));
  
      setCacheTestResults((prev) => ({
        ...prev,
        firstFetchStatus: 'Fetching products from database (cache miss)...',
      }));
      const firstStatus = await fetchProducts();
  
      setCacheTestResults((prev) => ({
        ...prev,
        firstFetchStatus: `First Fetch: Cache ${firstStatus}`,
      }));
  
      setTimeout(async () => {
        setCacheTestResults((prev) => ({
          ...prev,
          secondFetchStatus: 'Fetching products again (cache hit)...',
        }));
        const secondStatus = await fetchProducts();
  
        setCacheTestResults((prev) => ({
          ...prev,
          secondFetchStatus: `Second Fetch: Cache ${secondStatus}`,
          overallMessage: 'Cache test completed. Check the statuses above.',
        }));
      }, 2000);
    } catch (error) {
      console.error('Error testing Redis cache:', error);
      setCacheTestResults((prev) => ({
        ...prev,
        overallMessage: 'Error testing Redis cache',
      }));
    }
  };

  // Clear Redis cache
  const clearRedisCache = async () => {
    try {
      const token = await getAccessTokenSilently();
      const backendUrl = `${process.env.REACT_APP_BACKEND_SERVICE}/api/cache/clear`;
      await axiosInstance.get(backendUrl, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setCacheTestResults(prev => ({ ...prev, overallMessage: 'Redis cache cleared successfully' }));
    } catch (error) {
      console.error('Error clearing Redis cache:', error);
      setCacheTestResults(prev => ({ ...prev, overallMessage: 'Failed to clear Redis cache' }));
    }
  };

  // Render login button when not authenticated
  if (!isAuthenticated) {
    return (
      <div className="App">
        <h1>Welcome to the Product Management App</h1>
        <button onClick={() => loginWithRedirect()}>Log In</button>
      </div>
    );
  }

  if (loading) {
    return <div className="App">Loading...</div>;
  }

  if (error) {
    return <div className="App">{error}</div>;
  }

  return (
    <div className="App">
      <header className="App-header">
        <h1>Product List</h1>
        <button onClick={() => logout({ returnTo: window.location.origin })}>Log Out</button>
        <p>Welcome, {user.name}</p>
        <ul className="product-list">
          {products.length > 0 ? (
            products.map((product) => (
              <li key={product.id} className="product-item">
                <span className="product-name">{product.name} - ${product.price}</span>
                <div className="product-buttons">
                  <button className="edit-button" onClick={() => handleSelectProduct(product)}>Edit</button>
                  <button className="delete-button" onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                </div>
              </li>
            ))
          ) : (
            <li>No products available</li>
          )}
        </ul>
        <div className="product-form">
          <h2>{selectedProductId ? 'Update Product' : 'Add New Product'}</h2>
          <input
            type="text"
            placeholder="Product Name"
            value={productName}
            onChange={(e) => setProductName(e.target.value)}
            className="input-field"
          />
          <input
            type="number"
            placeholder="Product Price"
            value={productPrice}
            onChange={(e) => setProductPrice(parseFloat(e.target.value))}
            className="input-field"
          />
          <button className="submit-button" onClick={handleAddOrUpdateProduct}>
            {selectedProductId ? 'Update' : 'Add'} Product
          </button>
          <p>{responseMessage}</p>
        </div>
        <div className="queue-section">
          <h2>RabbitMQ - Queue Messages</h2>
          <button className="fetch-messages-button" onClick={fetchQueueMessages}>Fetch Queue Messages</button>
          <button className="clear-messages-button" onClick={clearQueueMessages}>Clear Messages</button>
          <ul className="queue-messages-list">
            {queueMessages.length > 0 ? (
              queueMessages.map((message, index) => (
                <li key={index} className="queue-message">{message}</li>
              ))
            ) : (
              <li>No messages in queue</li>
            )}
          </ul>
        </div>
        <div className="cache-section">
          <h2>Test Redis Cache</h2>
          <button className="cache-test-button" onClick={testRedisCache}>Test Cache</button>
          <button className="clear-cache-button" onClick={clearRedisCache}>Clear Cache</button>
          <div className="cache-test-results">
            <p>{cacheTestResults.firstFetchStatus}</p>
            <p>{cacheTestResults.secondFetchStatus}</p>
            <p>{cacheTestResults.overallMessage}</p>
          </div>
        </div>
      </header>
    </div>
  );
}

export default App;
